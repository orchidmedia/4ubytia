{% capture p_top %}{% if block.settings.padding_top %}var(--column-gap){% else %}0{% endif %}{% endcapture %}
{% capture p_right %}{% if block.settings.padding_right %}var(--column-gap){% else %}0{% endif %}{% endcapture %}
{% capture p_bottom %}{% if block.settings.padding_bottom %}var(--column-gap){% else %}0{% endif %}{% endcapture %}
{% capture p_left %}{% if block.settings.padding_left %}var(--column-gap){% else %}0{% endif %}{% endcapture %}
<div class="sf-video" style="padding:{{ p_top }} {{ p_right }} {{ p_bottom }} {{ p_left }}">
  <div class="sf-video__container sf-video__container--{{ section.id }} mx-auto">
    <div class="sf-video__wrapper sf-video__wrapper--{{ section.id }}"
      style="--aspect-ratio: {{ block.settings.ratio | replace: ':', '/' }}">
      
      {% comment %} {%- if block.settings.image != blank -%}
      <div class="sf-video__cover bg-center"
        style="background-image: url({{ block.settings.image | img_url: '1920x' }})">
      </div>
      {%- endif -%} {% endcomment %}

    <div class="sf-video__inner text-center">
      {%- unless block.settings.video_title == blank -%}
        {% capture custom_classes %}sf-video__title{% endcapture %}
        {%- capture custom_styles -%}
          {%- if block.settings.text_color !='rgba(0,0,0,0)' and block.settings.text_color != blank -%}
            color:{{ block.settings.text_color }};
          {%- endif -%}
        {%- endcapture -%}

        {% render 'heading-tag'
          heading: block.settings.heading_tag,
          content: block.settings.video_title,
          custom_classes: custom_classes,
          custom_styles: custom_styles
        %}
      {%- endunless -%}
    </div>

    {%- liquid
      assign controls_position = block.settings.controls_position | split: ' '
      assign controls_horizontal_alignment = controls_position.first
      assign controls_vertical_alignment = controls_position.last | strip
    -%}
    <div class="sf__video-controls sf__video-controls--{{ controls_vertical_alignment }}-{{ controls_horizontal_alignment }}">
      {% if block.settings.video_controls %}
        <button class="sf__video-controls-pause" aria-label="play / pause video"
          style="width: {{ block.settings.play_pause_svg_size }}; height: {{ block.settings.play_pause_svg_size }}">
          <img src="{% if block.settings.autoplay == true %} {{block.settings.pause_button}} {% else %} {{block.settings.play_button}} {% endif %}"
            alt="{{ block.settings.play_pause_alt }}"
            style="width: {{ block.settings.play_pause_svg_size }}; height: {{ block.settings.play_pause_svg_size }}">
        </button>
      {% endif %}
      {%- if block.settings.lightbox_enabled -%}
        <button data-open-lightbox aria-label="watch video fullscreen"
          style="width: {{ block.settings.lightbox_button_svg_size }};height: {{ block.settings.lightbox_button_svg_size }}">
            <img style="width: {{ block.settings.lightbox_button_svg_size }};height: {{ block.settings.lightbox_button_svg_size }}"
              src="{{ block.settings.lightbox_button_svg }}" alt="{{ block.settings.lightbox_button_alt }}" />
        </button>                                          
      {%- endif -%}
    </div> 
    

      <div id="sf-video__player-{{ section.id }}" class="plyr__video-embed" style="pointer-events: none;"
        data-video-ratio="{{ block.settings.ratio | default: '16:9' }}" data-autoplay="{{ block.settings.autoplay }}"
        data-loop="{{ block.settings.loop }}" data-play-button="{{ block.settings.play_button }}"
        data-pause-button="{{ block.settings.pause_button }}" data-video-block>
        {% if block.settings.video_selector == 'youtube-vimeo' %}
          {% if block.settings.video_link contains 'youtube.com/watch' %}
            {%- liquid
              assign video_id = block.settings.video_link | split: 'v='
              assign video_id = video_id[1] | split: '&' | first
            -%}
            <iframe fetchpriority='low'
              src="https://www.youtube.com/embed/{{ video_id }}?iv_load_policy=3&amp;modestbranding=0&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;enablejsapi=1cc_load_policy=1&hl=en&cc_lang_pref=en"
              allowfullscreen allowtransparency allow="autoplay"></iframe>
          {% elsif block.settings.video_link contains 'youtu.be/' %}
            {%- liquid
              assign video_id = block.settings.video_link | split: '.be/'
              assign video_id = video_id[1] | split: '&' | first
            -%}
            <iframe fetchpriority='low'
              src="https://www.youtube.com/embed/{{ video_id }}?iv_load_policy=3&amp;modestbranding=0&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;enablejsapi=1cc_load_policy=1&hl=en&cc_lang_pref=en"
              allowfullscreen allowtransparency allow="autoplay"></iframe>
          {% elsif block.settings.video_link contains 'vimeo.com' %}
            {%- liquid
              assign video_id = block.settings.video_link | split: '.com/'
              assign video_id = video_id[1] | split: '/' | first
            -%}
            <iframe fetchpriority='low' src="https://player.vimeo.com/video/{{ video_id }}?h=69768d2afa&playsinline=1&controls=1{% if block.settings.video_cations == 'custom' %}&texttrack=en{% elsif block.settings.video_captions == 'generated' %}&texttrack=en-x-autogenerated{% endif%}" frameborder="0"
              allowfullscreen allowtransparency allow="autoplay" allow=autoplay></iframe>
          {% endif %}
        {% elsif block.settings.video_selector == 'video-format' %}
          <video {% if block.settings.image != blank %}poster="{{block.settings.image | img_url: '1920x'}}"{% endif %}playsinline preload="auto" muted="muted" {% if block.settings.autoplay %}autoplay{% endif %}
            {% if block.settings.loop %}loop{% endif %}>
            {% liquid
              assign video_url = block.settings.video | split: '?v='
              assign video_url = video_url | first | strip_newlines
              assign format = ''
              if video_url contains '.mp4'
                assign format = 'mp4'
              endif
              if video_url contains '.webm'
                assign format = 'webm'
              endif
              if video_url contains '.mov'
                assign format = 'mp4'
              endif
            %}
            <source src="{{ video_url }}" type="video/{{ format }}">
            {% if block.settings.video_captions %}<track label="English" kind="subtitles" srclang="en" src="{{block.settings.video_captions}}" default>{% endif %}
            Your browser does not support the video tag.
          </video>
          {% if block.settings.image != blank %}
            <link rel="preload" as="image" href="{{block.settings.image | img_url: '1920x'}}" fetchpriority='high' />
          {% endif %}
        {% else %}
          <div class="placeholder-noblocks text-center">
            {{ 'homepage.onboarding.no_content' | t }}
          </div>
        {% endif %}
      </div>
    </div>
  </div>
</div>

{%- if block.settings.lightbox_enabled -%}
  <div data-glightbox
    data-source-url="{{ block.settings.lightbox_video_url }}"
    data-media-type="{%- if block.settings.video_selector == 'youtube-vimeo' -%}external_video{%- else -%}video{%- endif -%}"
    data-host="{%- if block.settings.lightbox_video_url contains "youtu" -%}youtube{%- else -%}vimeo{%- endif -%}"
></div>
{%- endif -%}

{{ lightbox_container }}

{% capture lightbox_container %}
  {%- if block.settings.lightbox_enabled -%}
      <div data-open-lightbox 
          class="py-2"
          style="--slider-video-play-color:{{ block.settings.lightbox_btn_color }};--slider-video-play-bg-color:{{ block.settings.lightbox_btn_bg_color }};--btn-color:{{ block.settings.lightbox_btn_color}};max-width:fit-content;"
      >
        {%- if block.settings.lightbox_default_btn -%}
              {% render 'button-link'
                  style: block.settings.lightbox_btn_style,
                  text: block.settings.lightbox_btn_label,
                  width: block.settings.lightbox_btn_width,
                  override_width: block.settings.lightbox_btn_override_width,
                  classes: block.settings.lightbox_btn_classes
              %}
          {%- else -%}
              {%- assign button_class = "" -%}
              {%- case block.settings.lightbox_btn -%}
                  {%- when 'outline' -%}
                      {%- assign button_class = "slider-play__outline" -%}
                  {%- when 'solid' -%}
                      {%- assign button_class = "slider-play__solid" -%}
              {%- endcase -%}
              <div class="slider-video__play {{ button_class }} {{ block.settings.lightbox_btn_size }}">
                  {% render 'icon', name: 'play' %}
              </div>
          {%- endif -%}
      </div>
  {%- endif -%}
{% endcapture %}
